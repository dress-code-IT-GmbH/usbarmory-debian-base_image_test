# This workflow builds and releases the SD-Card Debian-Image for: USB Armory Mark2 (imx6ulz)

name: Build and Release Mark2 Debian Image
on:
  workflow_dispatch:

env:
  ARCH: imx6ulz
  BOOT: uSD
  MEM: 512M
  DEVICE: mark-two

jobs:
  mark-two:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3.3.0
    - uses: actions/setup-go@v3.5.0
      with:
        go-version: '1.22.1'

    - name: Prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bc binfmt-support bzip2 fakeroot file gcc gcc-arm-linux-gnueabihf git \
          gnupg make parted rsync qemu-user-static wget xz-utils zip debootstrap \
          sudo dirmngr bison flex libssl-dev kmod

    - name: Import Signing Keys
      run: |  # public key servers time out on at least one test, therefore we fetch cached keys
        wget https://usbarmory.github.io/keys/38DBBDC86092693E.asc && gpg --import 38DBBDC86092693E.asc
        wget https://usbarmory.github.io/keys/147C39FF9634B72C.asc && gpg --import 147C39FF9634B72C.asc

    - name: Build Image
      run: make V=${{ env.DEVICE }} IMX=${{ env.ARCH }} MEM=${{ env.MEM }} BOOT=${{ env.BOOT }}

    - name: Archive Build Output
      if: success()
      run: |
        mkdir -p output
        mv usbarmory-mark-two-usd-debian_bookworm-base_image-*.raw.xz* output/
        tar -czvf output/${{ env.DEVICE }}-${{ env.ARCH }}-${{ env.MEM }}-${{ env.BOOT }}.tar.gz -C output .

    - name: Upload Build Artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ env.DEVICE }}-${{ env.ARCH }}-${{ env.MEM }}-${{ env.BOOT }}
        path: output/*.tar.gz

  release:
    needs: mark-two
    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3.3.0

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-${{ env.DEVICE }}-${{ env.ARCH }}-${{ env.MEM }}-${{ env.BOOT }}
        path: ./output

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v0.0.${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Release for ${{ env.DEVICE }} with arch ${{ env.ARCH }}, memory ${{ env.MEM }}, and boot ${{ env.BOOT }}.
        draft: true
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/*.tar.gz
        asset_name: ${{ env.DEVICE }}-${{ env.ARCH }}-${{ env.MEM }}-${{ env.BOOT }}.tar.gz
        asset_content_type: application/gzip
